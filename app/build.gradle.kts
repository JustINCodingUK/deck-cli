/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.graalvm.native)
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor(0, "seconds")
    }
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
    implementation(libs.deck.api)
    implementation(libs.logback.classic)
    implementation(libs.slf4j.api)
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("2.1.20")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "dev.justincodinguk.deckcli.AppKt"
}

val fileNameSuffix = when {
    System.getProperty("os.name").startsWith("Windows", ignoreCase = true) -> "windows.exe"
    System.getProperty("os.name").startsWith("Mac", ignoreCase = true) -> "macos"
    System.getProperty("os.name").startsWith("Linux", ignoreCase = true) -> "linux"
    else -> "unknown"
}

graalvmNative {
    binaries {
        named("main") {
            buildArgs.add("--initialize-at-build-time")
            resources {
                includedPatterns.add("install_refs/.*")
                includedPatterns.add("res_manifest.txt")
            }
        }
    }
}

tasks.named("nativeCompile") {
    doLast {
        val outputDir = file("build/native/nativeCompile")
        val original = outputDir.resolve(if (fileNameSuffix == "windows.exe") "app.exe" else "app")
        val renamed = outputDir.resolve("deck-$fileNameSuffix")

        if (original.exists()) {
            original.renameTo(renamed)
            println("Renamed binary to: ${renamed.name}")
        } else {
            println("Original binary not found at: ${original.path}")
        }
    }
}

tasks.register<Jar>("fatJar") {
    archiveClassifier.set("all")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes["Main-Class"] = "dev.justincodinguk.deckcli.AppKt"
    }
    from(sourceSets.main.get().output)

    dependsOn(configurations.runtimeClasspath)
    from({
        configurations.runtimeClasspath.get().filter { it.name.endsWith("jar") }.map { zipTree(it) }
    })
}

val generateManifest by tasks.registering {
    doLast {
        val resourcesDir = file("src/main/resources/install_refs/")
        val manifestFile = file("src/main/resources/res_manifest.txt")
        manifestFile.bufferedWriter().use { out ->
            resourcesDir.walkTopDown().filter { it.isFile }.forEach {
                val relPath = it.relativeTo(file("src/main/resources")).path.replace("\\", "/")
                out.write(relPath)
                out.newLine()
            }
        }
    }
}

tasks.named("processResources") {
    dependsOn(generateManifest)
}
